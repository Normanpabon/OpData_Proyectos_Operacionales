{
	"info": {
		"_postman_id": "f7f5c6e0-55c6-4645-8fa7-9d1cbddd42c2",
		"name": "Testing OpData REST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Testing Usuarios",
			"item": [
				{
					"name": "Pruebas positivas",
					"item": [
						{
							"name": "Login credenciales validas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);   \r",
											"});\r",
											"\r",
											"pm.test(\"Login credenciales validas\", function(){\r",
											"        // Comprobamos con assert\r",
											"        pm.response.to.have.status(200);\r",
											"        });\r",
											"\r",
											"\r",
											"pm.test(\"Devuelve token JWT\", function(){\r",
											"\r",
											"    \r",
											"    // Verificamos que el token se haya recibido\r",
											"    pm.expect(responsJson.token).to.be.length > 15;\r",
											"\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Admin.opdata\",\r\n  \"password\": \"toor\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiURL}}/API/V2/login",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pruebas negativas",
					"item": [
						{
							"name": "Login credenciales invalidas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);   \r",
											"});\r",
											"\r",
											"pm.test(\"Error 401 Unauthorized credenciales invalidas\", function(){\r",
											"        // Comprobamos con assert\r",
											"        pm.response.to.have.status(401);\r",
											"        });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Usuario.Invalido\",\r\n  \"password\": \"clave\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiURL}}/API/V2/login",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Testing proyectos",
			"item": [
				{
					"name": "Pruebas positivas",
					"item": [
						{
							"name": "Obtener todos los proyectos de OpData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"pm.test(\"Codigo http 200 valido\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Devuelve body con proyectos\", function(){\r",
											"    \r",
											"    pm.response.to.have.body();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener proyectos unidad existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Codigo valido http 200\", function(){\r",
											"    // Comprobamos con el codigo http\r",
											"    pm.response.to.have.status(200);\r",
											"    // Comprobamos que se envie un cuerpo \r",
											"    pm.response.to.have.body();\r",
											"});\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/unidad/1",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"unidad",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar nuevo proyecto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 201 created esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Se reciben los datos del proyecto creado\", function(){\r",
											"\r",
											"    // Validamos unidad enviada en peticion\r",
											"    pm.expect(responsJson.unidad_p).to.be.eql(2);\r",
											"\r",
											"    // Validamos respuesta de fecha reg enviada\r",
											"    pm.expect(responsJson.fecha_reg).to.be.eql([\r",
											"        2020,\r",
											"        10,\r",
											"        5\r",
											"    ]);\r",
											"\r",
											"    // Validamos respuesta fecha inicio enviada\r",
											"    pm.expect(responsJson.fecha_ini).to.be.eql([\r",
											"        2021,\r",
											"        10,\r",
											"        5\r",
											"    ]);\r",
											"\r",
											"    // Validamos respuesta fecha fin enviada\r",
											"    pm.expect(responsJson.fecha_fin).to.be.eql([\r",
											"        2023,\r",
											"        12,\r",
											"        5\r",
											"    ]);\r",
											"\r",
											"    // Validamos Id estado enviado\r",
											"    pm.expect(responsJson.id_estado).to.be.eql(2);\r",
											"\r",
											"    // Validamos descripcion enviada\r",
											"\r",
											"    pm.expect(responsJson.desc_pro).to.be.eql(\"V2 test postman\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/2/2020-10-05/2021-10-05/2023-12-05/V2 test postman/2/NA",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"2",
										"2020-10-05",
										"2021-10-05",
										"2023-12-05",
										"V2 test postman",
										"2",
										"NA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Actualizar datos de un proyecto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 201 created esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Se reciben los datos del proyecto modificado\", function(){\r",
											"\r",
											"    // Validamos unidad enviada en peticion\r",
											"    pm.expect(responsJson.unidad_p).to.be.eql(3);\r",
											"\r",
											"    // Validamos respuesta de fecha reg enviada\r",
											"    pm.expect(responsJson.fecha_reg).to.be.eql([\r",
											"        2020,\r",
											"        10,\r",
											"        5\r",
											"    ]);\r",
											"\r",
											"    // Validamos respuesta fecha inicio enviada\r",
											"    pm.expect(responsJson.fecha_ini).to.be.eql([\r",
											"        2021,\r",
											"        10,\r",
											"        5\r",
											"    ]);\r",
											"\r",
											"    // Validamos respuesta fecha fin enviada\r",
											"    pm.expect(responsJson.fecha_fin).to.be.eql([\r",
											"        2023,\r",
											"        12,\r",
											"        5\r",
											"    ]);\r",
											"\r",
											"    // Validamos Id estado enviado\r",
											"    pm.expect(responsJson.id_estado).to.be.eql(3);\r",
											"\r",
											"    // Validamos descripcion enviada\r",
											"    pm.expect(responsJson.desc_pro).to.be.eql(\"Proyecto modificado test\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/19/3/2020-10-05/2021-10-05/2023-12-05/Proyecto modificado test/3/Esto es un test",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"19",
										"3",
										"2020-10-05",
										"2021-10-05",
										"2023-12-05",
										"Proyecto modificado test",
										"3",
										"Esto es un test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener todos los estados de OpData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo http 200 valido\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.body();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/estado/all",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"estado",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener estado por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo http 200 valido\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.body();\r",
											"});\r",
											"\r",
											"pm.test(\"Estado esperado segun el id\", function(){\r",
											"\r",
											"    pm.expect(responsJson.id).to.be.eql(3);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/estado/3",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"estado",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Crear un nuevo estado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 201 created esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Se reciben los datos del proyecto creado\", function(){\r",
											"\r",
											"    // Validamos nombre estado enviado peticion sea el mismo recibido\r",
											"    pm.expect(responsJson.estado).to.be.eql(\"TestPostman v2\");\r",
											"\r",
											"    // Validamos que la el estado sea equivalente al enviado (0: falso, 1: verdadero)\r",
											"    pm.expect(responsJson.habilitado).to.be.eql(false);\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/estado/TestPostman v2/0",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"estado",
										"TestPostman v2",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Actualizar datos de estado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 202 accepted esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"pm.test(\"Se reciben los datos del proyecto actualizado\", function(){\r",
											"    // Mismo id enviado para modificar\r",
											"    pm.expect(responsJson.id).to.be.eql(7);\r",
											"\r",
											"    // Validamos nombre estado enviado peticion sea el mismo recibido\r",
											"    pm.expect(responsJson.estado).to.be.eql(\"TestPostman v2 Mod\");\r",
											"\r",
											"    // Validamos que la el estado sea equivalente al enviado (0: falso, 1: verdadero)\r",
											"    pm.expect(responsJson.habilitado).to.be.eql(true);\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/estado/7/TestPostman v2 Mod/1",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"estado",
										"7",
										"TestPostman v2 Mod",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pruebas negativas",
					"item": [
						{
							"name": "Obtener proyectos unidad invalida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo de error 400 esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.body();\r",
											"});\r",
											"\r",
											"pm.test(\"Se recibe mensaje de error esperado\", function(){\r",
											"\r",
											"    pm.expect(responsJson).to.be.eql(\"getAllByUnidad.id: El id debe ser mayor a 0 \");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/unidad/-1",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"unidad",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar proyecto cuyo nombre excede maximo de caracteres (500 > caracteres)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 400 badrequest esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensaje de error esperado\", function(){\r",
											"\r",
											"    // Corregir, esta validando pese a que no sea igual\r",
											"    pm.expect(responsJson).to.be.eql(\"createProyecto.desc: La longitud maxima del nombre son 500 caracteres.\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/2/2020-10-05/2021-10-05/2023-12-05/ygoe7gv5dgQHHDjDk5qsqtA514nPVwSn6GjGMl6GqT21pJXblsGGkoUZtYE4mVd7Na6UnDOPWrq9mKTiFH1JFCQDraPq5FAYXHqQuiGj0C9wMrhPl6CurhdT5442HdDf8fef0spz7hD8UmuPO81c2pEat0gfmdnZj6PKYM0vFi298KC0e4z34RWbKH3laoU4HIuZzleo5Vmb8og0gBrXraWFbbEyN7pPoB0qzHmKGyxXqSsxfa6Zy4F7TibnW5DNZD1z7GtiuGABtKG8wC9dDZzTYw4eT9n6uWO1q3IGOgcM4mNqnldN4UBWftWSXxRoCbOo1k3FdVdbNXIqK9Ut31LOW81QTVJWL9OZJH2U6kwiakRiKCR40XtWDatx9oTcc4r2peznhkqqMDsTdW7rI10NnkUcm1jAVy3seUvfCu4ebM7KZZUA2mAklfdWrkrpO7bX6qj3A5rXKdBPxww1ZZUy3j5ujL6ifl8biVlhz9JUHkVxssHf59/2/NA",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"2",
										"2020-10-05",
										"2021-10-05",
										"2023-12-05",
										"ygoe7gv5dgQHHDjDk5qsqtA514nPVwSn6GjGMl6GqT21pJXblsGGkoUZtYE4mVd7Na6UnDOPWrq9mKTiFH1JFCQDraPq5FAYXHqQuiGj0C9wMrhPl6CurhdT5442HdDf8fef0spz7hD8UmuPO81c2pEat0gfmdnZj6PKYM0vFi298KC0e4z34RWbKH3laoU4HIuZzleo5Vmb8og0gBrXraWFbbEyN7pPoB0qzHmKGyxXqSsxfa6Zy4F7TibnW5DNZD1z7GtiuGABtKG8wC9dDZzTYw4eT9n6uWO1q3IGOgcM4mNqnldN4UBWftWSXxRoCbOo1k3FdVdbNXIqK9Ut31LOW81QTVJWL9OZJH2U6kwiakRiKCR40XtWDatx9oTcc4r2peznhkqqMDsTdW7rI10NnkUcm1jAVy3seUvfCu4ebM7KZZUA2mAklfdWrkrpO7bX6qj3A5rXKdBPxww1ZZUy3j5ujL6ifl8biVlhz9JUHkVxssHf59",
										"2",
										"NA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar proyecto cuya descripcion excede el maximo de caracteres ( 12000 > caracteres )",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 400 badrequest esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensaje de error esperado\", function(){\r",
											"\r",
											"    // Corregir, esta validando pese a que no sea igual\r",
											"    pm.expect(responsJson).to.be.eql(\"createProyecto.desc: La longitud maxima del nombre son 500 caracteres.\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/2/2020-10-05/2021-10-05/2023-12-05/Proyecto de prueba ",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"2",
										"2020-10-05",
										"2021-10-05",
										"2023-12-05",
										"Proyecto de prueba excedente",
										"2",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar proyecto fecha finalizacion invalida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 400 badrequest esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensaje de error esperado\", function(){\r",
											"\r",
											"\r",
											"    pm.expect(responsJson).to.be.eql(\"La fecha de finalizacion debe ser mayor a la fecha de registro e inicio.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/2/2020-10-05/2021-10-05/2020-12-05/V2 test postman/2/NA",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"2",
										"2020-10-05",
										"2021-10-05",
										"2020-12-05",
										"V2 test postman",
										"2",
										"NA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Actualizar datos de un proyecto cuyo nombre exceda el max de caracteres permitidos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 400 badrequest esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensaje de error esperado\", function(){\r",
											"\r",
											"    // Corregir, esta validando pese a que no sea igual\r",
											"    pm.expect(responsJson).to.be.eql(\"updateProyecto.desc: La longitud mininma del nombre son minimo 2 y maximo 500 caracteres.\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/19/2/2020-10-05/2021-10-05/2023-12-05/ygoe7gv5dgQHHDjDk5qsqtA514nPVwSn6GjGMl6GqT21pJXblsGGkoUZtYE4mVd7Na6UnDOPWrq9mKTiFH1JFCQDraPq5FAYXHqQuiGj0C9wMrhPl6CurhdT5442HdDf8fef0spz7hD8UmuPO81c2pEat0gfmdnZj6PKYM0vFi298KC0e4z34RWbKH3laoU4HIuZzleo5Vmb8og0gBrXraWFbbEyN7pPoB0qzHmKGyxXqSsxfa6Zy4F7TibnW5DNZD1z7GtiuGABtKG8wC9dDZzTYw4eT9n6uWO1q3IGOgcM4mNqnldN4UBWftWSXxRoCbOo1k3FdVdbNXIqK9Ut31LOW81QTVJWL9OZJH2U6kwiakRiKCR40XtWDatx9oTcc4r2peznhkqqMDsTdW7rI10NnkUcm1jAVy3seUvfCu4ebM7KZZUA2mAklfdWrkrpO7bX6qj3A5rXKdBPxww1ZZUy3j5ujL6ifl8biVlhz9JUHkVxssHf59/2/NA",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"19",
										"2",
										"2020-10-05",
										"2021-10-05",
										"2023-12-05",
										"ygoe7gv5dgQHHDjDk5qsqtA514nPVwSn6GjGMl6GqT21pJXblsGGkoUZtYE4mVd7Na6UnDOPWrq9mKTiFH1JFCQDraPq5FAYXHqQuiGj0C9wMrhPl6CurhdT5442HdDf8fef0spz7hD8UmuPO81c2pEat0gfmdnZj6PKYM0vFi298KC0e4z34RWbKH3laoU4HIuZzleo5Vmb8og0gBrXraWFbbEyN7pPoB0qzHmKGyxXqSsxfa6Zy4F7TibnW5DNZD1z7GtiuGABtKG8wC9dDZzTYw4eT9n6uWO1q3IGOgcM4mNqnldN4UBWftWSXxRoCbOo1k3FdVdbNXIqK9Ut31LOW81QTVJWL9OZJH2U6kwiakRiKCR40XtWDatx9oTcc4r2peznhkqqMDsTdW7rI10NnkUcm1jAVy3seUvfCu4ebM7KZZUA2mAklfdWrkrpO7bX6qj3A5rXKdBPxww1ZZUy3j5ujL6ifl8biVlhz9JUHkVxssHf59",
										"2",
										"NA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Actualizar datos de un proyecto fecha finalizacion invalida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 400 badrequest esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensaje de error esperado\", function(){\r",
											"\r",
											"\r",
											"    pm.expect(responsJson).to.be.eql(\"La fecha de finalizacion debe ser mayor a la fecha de registro e inicio.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/19/2/2020-10-05/2021-10-05/2020-12-05/V2 test postman/2/NA",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"19",
										"2",
										"2020-10-05",
										"2021-10-05",
										"2020-12-05",
										"V2 test postman",
										"2",
										"NA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Actualizar datos de un proyecto cuya descripcion excede el maximo de caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 400 badrequest esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensaje de error esperado\", function(){\r",
											"\r",
											"    // Corregir, esta validando pese a que no sea igual\r",
											"    pm.expect(responsJson).to.be.eql(\"createProyecto.desc: La longitud maxima del nombre son 500 caracteres.\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/19/2/2020-10-05/2021-10-05/2023-12-05/Proyecto de prueba ",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"19",
										"2",
										"2020-10-05",
										"2021-10-05",
										"2023-12-05",
										"Proyecto de prueba excedente",
										"2",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Actualizar datos de un proyecto cuyo nombre sea invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 400 created esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensaje de error esperado\", function(){\r",
											"\r",
											"    // Corregir, esta validando pese a que no sea igual\r",
											"    pm.expect(responsJson).to.be.eql(\"updateProyecto.desc: La longitud mininma del nombre son minimo 2 y maximo 500 caracteres.\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/19/3/2020-10-05/2021-10-05/2023-12-05/d/3/Esto es un test",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"19",
										"3",
										"2020-10-05",
										"2021-10-05",
										"2023-12-05",
										"d",
										"3",
										"Esto es un test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener estado por id invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo http 400 badrequest\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.body();\r",
											"});\r",
											"\r",
											"pm.test(\"Estado esperado segun el id\", function(){\r",
											"\r",
											"    pm.expect(responsJson).to.be.eql(\"getEstadoById.id: El id debe ser mayor a 0 \");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/estado/-1",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"estado",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Crear un nuevo estado cuyo nombre excede el maximo de caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 400 badRequest esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Se reciben los datos del proyecto creado\", function(){\r",
											"\r",
											"    //Validamos el mensaje de error recibido\r",
											"    pm.expect(responsJson).to.be.eql(\"createEstado.est: La longitud maxima del nombre son 32 caracteres.\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/estado/Estado invalido 765jmneXUgkYiL8HnvVddS1sKoD045E v2/0",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"estado",
										"Estado invalido 765jmneXUgkYiL8HnvVddS1sKoD045E v2",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Actualizar un nuevo estado cuyo nombre excede el maximo de caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo 400 badRequest esperado\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Se reciben los datos del proyecto creado\", function(){\r",
											"\r",
											"    //Validamos el mensaje de error recibido\r",
											"    pm.expect(responsJson).to.be.eql(\"updateEstado.estado: La longitud maxima del nombre son 32 caracteres.\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/proyectos/estado/6/Estado invalido 765jmneXUgkYiL8HnvVddS1sKoD045E v2/0",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"proyectos",
										"estado",
										"6",
										"Estado invalido 765jmneXUgkYiL8HnvVddS1sKoD045E v2",
										"0"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Testing unidades",
			"item": [
				{
					"name": "Pruebas positivas",
					"item": [
						{
							"name": "Obtener todas las unidades",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"pm.test(\"Codigo http 200 valido\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Devuelve body con unidades\", function(){\r",
											"    \r",
											"    pm.response.to.have.body();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/unidades/",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"unidades",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener unidad asignada a jefe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"pm.test(\"Codigo http 200 valido\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Devuelve JSON con unidad del jefe pedido\", function(){\r",
											"    \r",
											"    pm.expect(responsJson.uid_jefe).to.be.eql(2201000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/unidades/jefe/2201000",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"unidades",
										"jefe",
										"2201000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar una nueva unidad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"pm.test(\"Codigo http 201 valido\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(201);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Devuelve JSON con unidad creada\", function(){\r",
											"    \r",
											"\r",
											"    pm.expect(responsJson.nombre_unidad).to.be.eql(\"test postmanV5\");\r",
											"\r",
											"    pm.expect(responsJson.uid_jefe).to.be.eql(22104555);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/unidades/test postmanV5/22104555/1",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"unidades",
										"test postmanV5",
										"22104555",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar unidad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"pm.test(\"Codigo http 202 valido\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(202);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Devuelve JSON con unidad modificada\", function(){\r",
											"    \r",
											"    pm.expect(responsJson.id).to.be.eql(8);\r",
											"\r",
											"    pm.expect(responsJson.nombre_unidad).to.be.eql(\"test postmanV5\");\r",
											"\r",
											"    pm.expect(responsJson.uid_jefe).to.be.eql(22104555);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/unidades/8/test postmanV5/22104555/1",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"unidades",
										"8",
										"test postmanV5",
										"22104555",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pruebas negativas",
					"item": [
						{
							"name": "Obtener unidad usando id de jefe invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo http 400 valido\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Mensaje de error valido\", function(){\r",
											"\r",
											"    pm.expect(responsJson).to.be.eql(\"getUnidadByJefe.uid: El id debe ser positivo mayor a 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/unidades/jefe/-1",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"unidades",
										"jefe",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Crear unidad con nombre que exeda el maximo de caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo http 400 valido\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Mensaje de error valido\", function(){\r",
											"\r",
											"    pm.expect(responsJson).to.be.eql(\"saveUnidad.nombre: La longitud mininma del nombre de unidad son minimo 2 y maximo 128 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/unidades/test ostmanNaUquptktOIq27rDWaJFlu4IV34mmfJnvHCgrklICE6dy18NH2T8bZylfAVBaGNouZiuIQMiwkTk7acm2efclPKKkjAEd4eCh5MBAhLU1ssjEVdIywn5QGfOo6DZpBrmrDK/22104555/0",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"unidades",
										"test ostmanNaUquptktOIq27rDWaJFlu4IV34mmfJnvHCgrklICE6dy18NH2T8bZylfAVBaGNouZiuIQMiwkTk7acm2efclPKKkjAEd4eCh5MBAhLU1ssjEVdIywn5QGfOo6DZpBrmrDK",
										"22104555",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar unidad con nombre que excede el max de caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responsJson = pm.response.text();\r",
											"\r",
											"\r",
											"pm.test(\"Tiempo de respuesta menor a 200ms\", function(){\r",
											"    \r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);  \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Codigo http 400 valido\", function(){\r",
											"    // Comprobamos con assert\r",
											"    pm.response.to.have.status(400);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Mensaje de error valido\", function(){\r",
											"\r",
											"    pm.expect(responsJson).to.be.eql(\"updateUnidad.nombre: La longitud mininma del nombre de unidad son minimo 2 y maximo 128 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Opdata {{AuthKeyApi}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{ApiURL}}/API/V2/unidades/9/test ostmanNaUquptktOIq27rDWaJFlu4IV34mmfJnvHCgrklICE6dy18NH2T8bZylfAVBaGNouZiuIQMiwkTk7acm2efclPKKkjAEd4eCh5MBAhLU1ssjEVdIywn5QGfOo6DZpBrmrDK/22104555/0",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"API",
										"V2",
										"unidades",
										"9",
										"test ostmanNaUquptktOIq27rDWaJFlu4IV34mmfJnvHCgrklICE6dy18NH2T8bZylfAVBaGNouZiuIQMiwkTk7acm2efclPKKkjAEd4eCh5MBAhLU1ssjEVdIywn5QGfOo6DZpBrmrDK",
										"22104555",
										"0"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}